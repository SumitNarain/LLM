from pydantic import BaseModel, Field
from typing import List, Optional


class DiagnosticTest(BaseModel):
    name: str
    rationale: str

class MedicationOrder(BaseModel):
    name: str
    dose_route: str
    rationale: str

class EducationInstruction(BaseModel):
    topic: str
    instruction: str

# Main output model used by the LLM
class ManagementPlanOutput(BaseModel):
    """
    Structured management plan generated by the Medical Agent.
    Fields are repurposed during the conversation flow for state management.
    """
    differential_diagnosis: List[str] = Field(
        default_factory=list,
        description="A prioritized list of potential diagnoses."
    )
    primary_working_diagnosis: str = Field(
        ...,
        description="The most likely diagnosis, or the next action ('ASK_QUESTION')."
    )
    diagnostic_plan: List[DiagnosticTest] = Field(
        default_factory=list,
        description="List of initial and pending diagnostic studies."
    )
    therapeutic_plan: List[MedicationOrder] = Field(
        default_factory=list,
        description="List of immediate and planned medical treatments."
    )
    patient_education_and_counseling: List[EducationInstruction] = Field(
        default_factory=list,
        description="Key instructions for the patient."
    )
    follow_up_recommendation: str = Field(
        ...,
        description="Recommended follow-up or the CURRENT_SECTION being discussed."
    )
    physician_note: Optional[str] = Field(
        None,
        description="A concise summary, or the RUNNING HISTORY, or the QUESTION for the user."
    )